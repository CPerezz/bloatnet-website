{
    "attack_vectors": [
        {
            "id": "warm-extcodesize-24kb",
            "rank": 1,
            "rank_badge": "ü•á",
            "technique_name": "100 gas warm EXTCODESIZE probe on 24KiB contracts",
            "technique_detail": "Warm EXTCODESIZE operation on large contracts",
            "cost_per_transient_byte": "240 g/B",
            "cost_calculation": "100 gas √∑ 24,576 B",
            "details": {
                "net_persistent_state": "0 B",
                "bytes_read_written": "24 KiB read",
                "intrinsic_gas": "100 gas per EXTCODESIZE",
                "max_units_30m_gas": "300,000 calls ‚Üí 300,000 √ó 24KiB = 6.72GiB bytes read",
                "technical_notes": "EXTCODESIZE is priced really low, and requires the node to load the code even if storage is warm. As the node needs to count the bytes. That allows for an insane amount of data to be read while executing"
            }
        },
        {
            "id": "cold-extcodesize-24kb",
            "rank": 2,
            "rank_badge": "ü•à",
            "technique_name": "2600 gas cold EXTCODESIZE probe on 24KiB contracts",
            "technique_detail": "Cold EXTCODESIZE operation on large contracts",
            "cost_per_transient_byte": "9.45 g/B",
            "cost_calculation": "2,600 gas √∑ 24,576 B",
            "details": {
                "net_persistent_state": "0 B",
                "bytes_read_written": "24 KiB read",
                "intrinsic_gas": "2,600 gas per EXTCODESIZE",
                "max_units_30m_gas": "11,538 calls ‚Üí 11,538 √ó 24KiB = 270.6MiB read",
                "technical_notes": "EXTCODESIZE is priced really low, and since the node doesn't cache the size of the bytecode, it actually needs to copy the whole bytecode to memory, count bytes then return the value. If the accounts aren't cached, this has chances to be quite disruptive when tries are massive and this can be abused more with higher gas limits"
            }
        },
        {
            "id": "sstore-zero-to-nonzero-back",
            "rank": 3,
            "rank_badge": "ü•â",
            "technique_name": "SSTORE 0‚Üíx then x‚Üí0 in the same tx",
            "technique_detail": "Storage manipulation with refund",
            "cost_per_transient_byte": "475 g/B",
            "cost_calculation": "(20,000 gas - 4,800 gas refund) √∑ 32 Bytes",
            "details": {
                "net_persistent_state": "0 B",
                "bytes_read_written": "64 Bytes written & erased",
                "intrinsic_gas": "20,000 gas - 4,800 gas refund = 15,200 gas net",
                "max_units_30m_gas": "Variable based on refund calculations",
                "technical_notes": "Refund now capped to 1‚ÅÑ5 of gas used (EIP-3529) so attack lost ¬æ of its edge"
            }
        }
    ],
    "persistent_attacks": [
        {
            "id": "dense-nibble-paths",
            "attack": "Dense nibble-populated paths within the tree",
            "description": "Requires DB manipulation",
            "details": {
                "technical_notes": "This attack creates densely populated nibble paths in the Merkle Patricia Trie, forcing the database to traverse and store many intermediate nodes. By carefully crafting addresses and storage keys that share common prefixes, attackers can create trie structures that maximize node creation and traversal costs, leading to database bloat and performance degradation.",
                "requires_raw_db_manipulation": true,
                "impact_level": "High",
                "difficulty": "High"
            }
        },
        {
            "id": "deep-leaf-inclusion",
            "attack": "Deep leaf inclusion behaviour",
            "description": "Requires DB manipulation",
            "details": {
                "technical_notes": "This attack exploits the behavior when trie paths have 1 or 2 more levels than typical. By creating storage layouts that force deeper-than-normal trie structures, it significantly impacts read/write operations. The effect is amplified with higher gas limits, as more deep operations can be packed into a single block, potentially causing severe performance issues during state access and updates.",
                "requires_raw_db_manipulation": true,
                "impact_level": "High",
                "difficulty": "High"
            }
        }
    ],
    "metadata": {
        "last_updated": "2024-12-19",
        "total_vectors": 3,
        "total_persistent_attacks": 2,
        "ranking_criteria": "Gas cost per transient byte (lowest to highest cost)",
        "note": "Lower cost is more efficient for attackers. Rankings focus on EXTCODESIZE exploits and storage manipulation attacks."
    }
}