{
    "general_metrics": [
        {
            "id": "ram",
            "title": "RAM",
            "icon": "üíæ",
            "description": "Memory usage monitoring"
        },
        {
            "id": "swap",
            "title": "SWAP",
            "icon": "üîÑ",
            "description": "Swap memory utilization"
        },
        {
            "id": "goroutines",
            "title": "Goroutines",
            "icon": "üßµ",
            "description": "Concurrent goroutines count"
        },
        {
            "id": "threads-cpus",
            "title": "Threads/CPUs",
            "icon": "‚öôÔ∏è",
            "description": "Thread and CPU usage"
        },
        {
            "id": "state-size-growth",
            "title": "State Size Growth",
            "icon": "üìà",
            "description": "State database growth rate"
        },
        {
            "id": "disk-size",
            "title": "Disk Size",
            "icon": "üíø",
            "description": "Overall disk usage"
        },
        {
            "id": "reorgs",
            "title": "Reorgs",
            "icon": "üîÄ",
            "description": "Number of chain reorganizations"
        },
        {
            "id": "heap-activity",
            "title": "Heap Activity",
            "icon": "üìä",
            "description": "Memory heap allocation activity"
        }
    ],
    "initial_metrics": [
        {
            "id": "block-hash-block-time-calls",
            "title": "Block Hash and Block Time Calls",
            "category": "performance",
            "requester_badges": ["Stateless-Consensus"],
            "description": "Discussed with Guillaume",
            "specific_metrics": []
        },
        {
            "id": "read-write-performance-speed",
            "title": "Read/Write Performance Speed vs State Growth",
            "category": "performance",
            "requester_badges": ["Stateless-Consensus"],
            "description": "It would be nice to know how performance for I/O gets degraded wrt the state growth and its size at each time.",
            "specific_metrics": [
                "Min/Max/Avg Bytes/s Read and Write for every block with a 50k block queue",
                "Same block queue for all bloated states",
                "Avg RAM usage"
            ]
        },
        {
            "id": "block-time-vs-state-size",
            "title": "Block Time vs State Size and Gas Limit",
            "category": "execution",
            "requester_badges": ["Stateless-Consensus"],
            "description": "If block-time (block production/generation) time goes above 4s could start to be a problem. Also attesters would have more issues to make a block finalize on time.",
            "specific_metrics": [
                "For a machine with recommended hardware as per EIP-9270",
                "Block flamegraph decomposition"
            ]
        },
        {
            "id": "client-db-breaking-points",
            "title": "At Which State-Size Do Client-DBs Break?",
            "category": "database",
            "requester_badges": ["Stateless-Consensus"],
            "description": "It's important to know when and where client DB implementations will just break as they can't hold X[G/T]Bs of state. So that we see if things like e.g. sync or other things (OOM, etc) fail.",
            "specific_metrics": []
        },
        {
            "id": "mpt-bal-witness-size",
            "title": "Size of MPT Witness & BAL vs State Size",
            "category": "witness",
            "requester_badges": ["Stateless-Consensus"],
            "description": "Size of an MPT witness & BAL wrt. state size and gas_limit",
            "specific_metrics": []
        },
        {
            "id": "db-compaction-impact",
            "title": "DB Compaction Impact",
            "category": "database",
            "requester_badges": ["Stateless-Consensus"],
            "description": "Interesting to see the impacts on DB compaction that state-growth will cause and when. Would be interesting to have a client constantly running compaction or at least monitor closely.",
            "specific_metrics": [
                "Duration",
                "Frequency",
                "What happens if we reorg when ongoing (check for different reorg sizes)",
                "Compaction count"
            ]
        },
        {
            "id": "sync-metrics",
            "title": "Sync Metrics - Breaking Points & Performance",
            "category": "sync",
            "requester_badges": ["Stateless-Consensus"],
            "description": "Test snap-sync with each client for every 50-100 GB. Account for starting and final chain/DB size and speed of syncing as well as any issues that happen on the meantime. This measurements should be taken under heavy network stress and under avg. workload.",
            "specific_metrics": [
                "Healing phase duration",
                "Overall sync duration",
                "Start-End DB size",
                "GasLimit at which is performed",
                "R/W performance for all ops"
            ]
        },
        {
            "id": "cache-missing-rates",
            "title": "Cache Missing Rates",
            "category": "caching",
            "requester_badges": ["Stateless-Consensus"],
            "description": "Cache missing rates wrt. Things like how cache poisoning affects next block execution are really valuable info on attack vectors that now seem unfeasible to perform.",
            "specific_metrics": []
        },
        {
            "id": "transaction-confirmation-times",
            "title": "Transaction Confirmation Times",
            "category": "user-experience",
            "requester_badges": ["Stateless-Consensus"],
            "description": "Real-world transaction processing speeds under various network loads. Important for maintaining user experience as throughput increases.",
            "specific_metrics": []
        },
        {
            "id": "read-write-tree-depth",
            "title": "Read/Write Performance at Different Tree Depths",
            "category": "performance",
            "requester_badges": ["Stateless-Consensus"],
            "description": "We want to understand this multidimensional tradeoff space of State size - Deepest leaf included - Read/Write performance. The idea is to go in increments of 100GB and force DB leaf inclusions at different tree depths and then measure read/write and state-root computation performance.",
            "specific_metrics": []
        }
    ],
    "additional_metrics": [
        {
            "id": "reth-io-metrics",
            "title": "General I/O Metrics",
            "category": "reth",
            "requester_badges": ["Reth"],
            "description": "General i/o metrics (for ex those from prometheus node_exporter), even better if it's possible to collect page cache metrics.",
            "specific_metrics": []
        },
        {
            "id": "erigon-database-access",
            "title": "Database Access Measurement (SLOAD/SSTORE)",
            "category": "erigon",
            "requester_badges": ["Erigon"],
            "description": "Measure database Access (SLOAD/SSTORE)",
            "specific_metrics": []
        },
        {
            "id": "erigon-state-root-computation",
            "title": "State Root Computation Time",
            "category": "erigon",
            "requester_badges": ["Erigon"],
            "description": "Measure state root computation time",
            "specific_metrics": []
        },
        {
            "id": "besu-sload-percentage",
            "title": "Percentage of State Accesses (SLOAD) in Block Execution",
            "category": "besu",
            "requester_badges": ["Besu"],
            "description": "This should be checked with different gas limits, and different state sizes and for similar blocks.",
            "specific_metrics": []
        },
        {
            "id": "besu-state-root-throughput",
            "title": "State Root Hash Calculation Throughput",
            "category": "besu",
            "requester_badges": ["Besu"],
            "description": "Do EL clients have the same throughput (mgas/s) with higher gas limit? And if no, is it only related to state growth?",
            "specific_metrics": []
        },
        {
            "id": "besu-hardware-breaking-points",
            "title": "Gas Limit & State Size Breaking Points",
            "category": "besu",
            "requester_badges": ["Besu"],
            "description": "What gas_limit and at what state size do EL clients break on a predefined hardware, like a 32 GiB machine. Using Hardware and Bandwidth recommendations from EIP 9270 to see when different EL clients break due to state being too big and the gas_limit too high.",
            "specific_metrics": [
                "Test with increments of 50-100GiB state sizes",
                "Stress-test with different attack scenarios",
                "Adapt to various gas limits"
            ]
        },
        {
            "id": "geth-random-storage-access",
            "title": "Random Storage Access Patterns",
            "category": "geth",
            "requester_badges": ["Geth"],
            "description": "We are mainly concerned about blocks that have a similar access pattern as ZEN mining. We would like to see scenarios tested with a single large contract with a lot of random storage slots.",
            "specific_metrics": [
                "Reading a lot of random storage slots with SLOAD",
                "Updating EXISTING storage slots to another non-zero number",
                "Updating EXISTING storage slots to 0",
                "Writing more random storage slots in the contract"
            ]
        },
        {
            "id": "geth-reorg-testing",
            "title": "Reorg Testing",
            "category": "geth",
            "requester_badges": ["Geth"],
            "description": "We would like to see larger reorgs of blocks that contain a lot of changes to the database.",
            "specific_metrics": [
                "Reorging the head block",
                "Reorging the last 127 blocks",
                "Reorging the last 128+ blocks (geth supports reorgs up to 8k)"
            ]
        },
        {
            "id": "geth-pathdb-archive-mode",
            "title": "Testing PathDB in Archive Mode",
            "category": "geth",
            "requester_badges": ["Geth"],
            "description": "We are working on shipping a new archive mode which would be nice to test on this network.",
            "specific_metrics": []
        },
        {
            "id": "geth-account-vs-storage-tree-depth",
            "title": "Impact of Account Tree Depth vs Storage Tree Depth",
            "category": "geth",
            "requester_badges": ["Geth"],
            "description": "During our state root computation, we calculate the storage tree's in parallel. The account tree is computed at the end. Thus an increase in the depth of the account trie probably has more impact on our state root computation than increase in the state tree.",
            "specific_metrics": []
        }
    ],
    "categories": {
        "performance": {
            "name": "Performance",
            "color": "#a855f7",
            "icon": "‚ö°"
        },
        "database": {
            "name": "Database",
            "color": "#3b82f6",
            "icon": "üíæ"
        },
        "execution": {
            "name": "Execution",
            "color": "#10b981",
            "icon": "üîÑ"
        },
        "witness": {
            "name": "Witness",
            "color": "#f59e0b",
            "icon": "üìã"
        },
        "sync": {
            "name": "Synchronization",
            "color": "#84cc16",
            "icon": "üîÑ"
        },
        "caching": {
            "name": "Caching",
            "color": "#ec4899",
            "icon": "‚ö°"
        },
        "user-experience": {
            "name": "User Experience",
            "color": "#06b6d4",
            "icon": "üë•"
        },
        "reth": {
            "name": "Reth",
            "color": "#f97316",
            "icon": "ü¶Ä"
        },
        "erigon": {
            "name": "Erigon",
            "color": "#06b6d4",
            "icon": "üöÄ"
        },
        "nethermind": {
            "name": "Nethermind",
            "color": "#10b981",
            "icon": "‚ö°"
        },
        "besu": {
            "name": "Besu",
            "color": "#3b82f6",
            "icon": "‚òï"
        },
        "geth": {
            "name": "Geth",
            "color": "#627eea",
            "icon": "‚öôÔ∏è"
        }
    },
    "requesters": {
        "Stateless-Consensus": {
            "name": "Stateless-Consensus",
            "color": "#1e40af",
            "url": "https://stateless.fyi/"
        },
        "Geth": {
            "name": "Geth",
            "color": "#627eea",
            "url": "https://geth.ethereum.org/"
        },
        "Reth": {
            "name": "Reth",
            "color": "#f97316",
            "url": "https://reth.rs/"
        },
        "Erigon": {
            "name": "Erigon",
            "color": "#06b6d4",
            "url": "https://erigon.tech/"
        },
        "Nethermind": {
            "name": "Nethermind",
            "color": "#1ed79a",
            "url": "https://nethermind.io/"
        },
        "Besu": {
            "name": "Besu",
            "color": "#3b82f6",
            "url": "https://besu.hyperledger.org/"
        }
    }
}