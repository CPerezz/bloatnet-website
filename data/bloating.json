{
    "techniques": [
        {
            "id": "deploy-24kb-contract",
            "rank": 1,
            "rank_badge": "ü•á",
            "technique_name": "Deploy 24kB contract (EIP-170 limit)",
            "technique_detail": "Maximum size contract deployment",
            "what_written": "runtime code + account trie node",
            "intrinsic_gas": {
                "breakdown": "32,000 CREATE + 20,000 new-acct + 200 √ó 24,576 code deposit",
                "total": "4,967,200 gas"
            },
            "gas_per_byte": "~202 gas",
            "details": {
                "contract_size": "24,576 bytes (EIP-170 maximum)",
                "storage_location": "Contract code stored in state trie + account creation",
                "bytes_to_state": "24,576 B",
                "max_units_per_block": "6 full deployments",
                "technical_notes": "Most efficient method for large data storage. EIP-170 limits contract size but this maximizes bytes per gas spent"
            }
        },
        {
            "id": "eip-7702-delegate",
            "rank": 2,
            "rank_badge": "ü•à",
            "technique_name": "Add delegate flag to funded EOA (EIP-7702)",
            "technique_detail": "Authorization tuple in large batch",
            "what_written": "23 B (0xef0100‚Äñaddress) + updated account leaf",
            "intrinsic_gas": {
                "breakdown": "25,000 PER_EMPTY_ACCOUNT + 12,500 PER_AUTH_BASE + 1,616 calldata - 7,823 refund",
                "total": "~31,300 gas"
            },
            "gas_per_byte": "~232 gas",
            "details": {
                "authorization_data": "23-byte delegation marker with target address",
                "refund_mechanism": "20% refund cap (EIP-3529) reduces effective cost",
                "bytes_to_state": "~135 B",
                "max_units_per_block": "960 tuples",
                "technical_notes": "EIP-7702 allows efficient account delegation. Batching multiple authorizations reduces per-byte cost"
            }
        },
        {
            "id": "sstore-zero-nonzero",
            "rank": 3,
            "rank_badge": "ü•â",
            "technique_name": "SSTORE 0‚Üínonzero in 32-byte increments",
            "technique_detail": "Storage slot modification",
            "what_written": "32 B in storage slot + updated storage trie",
            "intrinsic_gas": {
                "breakdown": "20,000 SSTORE + 2,100 cold access",
                "total": "22,100 gas"
            },
            "gas_per_byte": "~691 gas",
            "details": {
                "storage_size": "32 bytes per slot",
                "storage_location": "Contract storage trie",
                "bytes_to_state": "32 B + trie overhead",
                "max_units_per_block": "1,357 writes",
                "technical_notes": "Classic storage bloating. Each new storage slot permanently increases state size"
            }
        },
        {
            "id": "create2-vanity",
            "rank": 4,
            "rank_badge": "4Ô∏è‚É£",
            "technique_name": "CREATE2 with vanity addresses",
            "technique_detail": "Small contracts with computed addresses",
            "what_written": "runtime code + account trie node",
            "intrinsic_gas": {
                "breakdown": "32,000 CREATE2 + 20,000 new-acct + 200 √ó size",
                "total": "varies by size"
            },
            "gas_per_byte": "~800-1000 gas",
            "details": {
                "contract_size": "Variable (optimized for gas efficiency)",
                "storage_location": "Account trie + code storage",
                "bytes_to_state": "Variable",
                "max_units_per_block": "Depends on contract size",
                "technical_notes": "CREATE2 allows predictable addresses. Can be optimized for specific byte patterns"
            }
        },
        {
            "id": "log-data",
            "rank": 5,
            "rank_badge": "5Ô∏è‚É£",
            "technique_name": "LOG with maximum data",
            "technique_detail": "Event emission with large payloads",
            "what_written": "log data (transient)",
            "intrinsic_gas": {
                "breakdown": "375 LOG + 8 √ó data_size",
                "total": "varies by data size"
            },
            "gas_per_byte": "~8 gas (transient)",
            "details": {
                "log_size": "Up to block gas limit",
                "storage_location": "Event logs (not part of state)",
                "bytes_to_state": "0 B (transient only)",
                "max_units_per_block": "Limited by gas",
                "technical_notes": "Logs don't increase permanent state but consume block space and client resources"
            }
        }
    ],
    "metadata": {
        "last_updated": "2024-12-19",
        "total_techniques": 5,
        "ranking_criteria": "Gas cost per byte stored (lowest to highest cost)",
        "note": "Lower cost is more efficient for data storage"
    }
}